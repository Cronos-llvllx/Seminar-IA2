import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Definir la función de activación sigmoide
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

# Derivada de la función de activación sigmoide
def sigmoid_derivative(x):
    return x * (1 - x)

# Cargar el dataset
data = pd.read_csv('concentlite.csv')

# Separar las características (X) y las etiquetas (y)
X = data.iloc[:, :-1].values
y = data.iloc[:, -1].values

# Definir la arquitectura de la red neuronal
input_size = X.shape[1]
hidden_size = 4  # Número de neuronas en la capa oculta
output_size = 1  # Número de neuronas en la capa de salida
learning_rate = 0.1
epochs = 10000

# Inicializar los pesos y sesgos de manera aleatoria
np.random.seed(0)
weights_input_hidden = np.random.uniform(size=(input_size, hidden_size))
bias_hidden = np.random.uniform(size=(1, hidden_size))
weights_hidden_output = np.random.uniform(size=(hidden_size, output_size))
bias_output = np.random.uniform(size=(1, output_size))

# Entrenamiento de la red neuronal
for epoch in range(epochs):
    # Propagación hacia adelante
    hidden_input = np.dot(X, weights_input_hidden) + bias_hidden
    hidden_output = sigmoid(hidden_input)
    output_input = np.dot(hidden_output, weights_hidden_output) + bias_output
    predicted_output = sigmoid(output_input)

    # Cálculo del error
    error = y.reshape(-1, 1) - predicted_output

    # Retropropagación y ajuste de pesos y sesgos
    d_predicted_output = error * sigmoid_derivative(predicted_output)
    error_hidden_layer = d_predicted_output.dot(weights_hidden_output.T)
    d_hidden_layer = error_hidden_layer * sigmoid_derivative(hidden_output)

    weights_hidden_output += hidden_output.T.dot(d_predicted_output) * learning_rate
    bias_output += np.sum(d_predicted_output, axis=0, keepdims=True) * learning_rate
    weights_input_hidden += X.T.dot(d_hidden_layer) * learning_rate
    bias_hidden += np.sum(d_hidden_layer, axis=0, keepdims=True) * learning_rate

# Clasificar los datos de entrada
predicted_labels = (predicted_output > 0.5).astype(int)

# Graficar los resultados
plt.scatter(X[:, 0], X[:, 1], c=predicted_labels, cmap='coolwarm')
plt.title('Clasificación con MLP')
plt.show()
